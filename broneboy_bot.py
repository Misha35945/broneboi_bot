import logging
import sqlite3
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "7518061806:AAFbwc3UmUaYxaRd2GJtTargLA9E0mJDLgo"
ADMIN_IDS = [8064681880]  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
CARD_NUMBER = "2200 7009 0060 1229 (—Ç –±–∞–Ω–∫ –ú–∏—Ö–∞–∏–ª)"  # ‚Üê –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
conn = sqlite3.connect("tournaments.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS tournaments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    fee INTEGER
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS registrations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    tournament_id INTEGER
)
""")
conn.commit()

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_photo(
            photo="https://i.ibb.co/4wNtnnVM/start.jpg",
            caption=(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ë—Ä–æ–Ω–µ–±–æ–π –ë–æ—Ç.\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/tournaments ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã\n"
                "/register ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
            )
        )
    except:
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ë—Ä–æ–Ω–µ–±–æ–π –ë–æ—Ç.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/tournaments ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã\n"
            "/register ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
        )

async def tournaments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT * FROM tournaments")
    rows = cursor.fetchall()

    if not rows:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
        return

    for row in rows:
        tournament_id, name, fee = row
        btn = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"register_{tournament_id}")]
        ])
        fee_text = f"üí∞ –í–∑–Ω–æ—Å: {fee}‚ÇΩ" if fee else "üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
        await update.message.reply_text(
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {name}\n{fee_text}",
            reply_markup=btn
        )

async def register_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    data = query.data

    if data.startswith("register_"):
        tournament_id = int(data.split("_")[1])
        cursor.execute("SELECT name, fee FROM tournaments WHERE id = ?", (tournament_id,))
        tournament = cursor.fetchone()
        if not tournament:
            await query.edit_message_text("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        name, fee = tournament

        cursor.execute("""
            SELECT * FROM registrations 
            WHERE user_id = ? AND tournament_id = ?
        """, (user.id, tournament_id))
        if cursor.fetchone():
            await query.edit_message_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        cursor.execute("""
            INSERT INTO registrations (user_id, username, tournament_id)
            VALUES (?, ?, ?)
        """, (user.id, user.username or "", tournament_id))
        conn.commit()

        if fee > 0:
            await query.edit_message_text(
                f"‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç—É—Ä–Ω–∏—Ä: {name}!\n\n"
                f"üí∞ –í–∑–Ω–æ—Å: {fee}‚ÇΩ\n"
                f"üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É:\n`{CARD_NUMBER}`\n\n"
                "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –∏ –∫–æ–º–∞–Ω–¥—É /confirm –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                parse_mode="Markdown"
            )
        else:
            await query.edit_message_text(f"üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç—É—Ä–Ω–∏—Ä: {name}!")

    elif data.startswith("del_tourn_"):
        tournament_id = int(data.split("_")[2])
        cursor.execute("DELETE FROM tournaments WHERE id = ?", (tournament_id,))
        cursor.execute("DELETE FROM registrations WHERE tournament_id = ?", (tournament_id,))
        conn.commit()
        await query.edit_message_text("‚ùå –¢—É—Ä–Ω–∏—Ä —É–¥–∞–ª—ë–Ω.")

    elif data.startswith("del_user_"):
        reg_id = int(data.split("_")[2])
        cursor.execute("DELETE FROM registrations WHERE id = ?", (reg_id,))
        conn.commit()
        await query.edit_message_text("üóëÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª—ë–Ω.")

# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    cursor.execute("SELECT id, name FROM tournaments")
    rows = cursor.fetchall()
    if rows:
        buttons = [[InlineKeyboardButton(f"üóë {name}", callback_data=f"del_tourn_{id}")] for id, name in rows]
        reply_markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text("üóë –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

    await update.message.reply_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
        "/add_tournament ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä\n"
        "/list_players ‚Äî —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
async def add_tournament(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –≤–∑–Ω–æ—Å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä:\n`–õ–µ—Ç–Ω–∏–π –¢—É—Ä–Ω–∏—Ä, 0` ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π\n"
        "`–ö—É–±–æ–∫, 300` ‚Äî –ø–ª–∞—Ç–Ω—ã–π", parse_mode="Markdown"
    )
    context.user_data['add_tournament'] = True

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('add_tournament'):
        try:
            text = update.message.text
            parts = [x.strip() for x in text.split(",")]
            name = parts[0]
            fee = int(parts[1]) if len(parts) > 1 else 0
            cursor.execute("INSERT INTO tournaments (name, fee) VALUES (?, ?)", (name, fee))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –¢—É—Ä–Ω–∏—Ä ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.")
        except:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: `–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—É–º–º–∞`")
        context.user_data['add_tournament'] = False

# –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async def list_players(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    cursor.execute("""
        SELECT r.id, r.username, t.name FROM registrations r
        JOIN tournaments t ON r.tournament_id = t.id
    """)
    rows = cursor.fetchall()

    if not rows:
        await update.message.reply_text("–ù–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.")
        return

    for reg_id, username, t_name in rows:
        user_display = f"@{username}" if username else "–ë–µ–∑ username"
        btn = InlineKeyboardMarkup([
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_user_{reg_id}")]
        ])
        await update.message.reply_text(
            f"{user_display} ‚Äî {t_name}",
            reply_markup=btn
        )

# –ö–æ–º–∞–Ω–¥–∞ /confirm
async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù –°–ø–∞—Å–∏–±–æ! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É.")

# === –ó–∞–ø—É—Å–∫ ===
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("tournaments", tournaments))
    app.add_handler(CommandHandler("register", tournaments))  # —Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(CommandHandler("add_tournament", add_tournament))
    app.add_handler(CommandHandler("list_players", list_players))
    app.add_handler(CommandHandler("confirm", confirm))
    app.add_handler(CallbackQueryHandler(register_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
