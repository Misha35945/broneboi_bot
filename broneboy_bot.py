import logging
import asyncio
import sqlite3
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "7518061806:AAFbwc3UmUaYxaRd2GJtTargLA9E0mJDLgo"
ADMIN_IDS = [8064681880]  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
CARD_NUMBER = "2200 7009 0060 1229 (—Ç –±–∞–Ω–∫ –ú–∏—Ö–∞–∏–ª)"

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
conn = sqlite3.connect("tournaments.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS tournaments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    fee INTEGER
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS registrations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    tournament_id INTEGER
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS winrates (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE,
    wins INTEGER
)
""")

conn.commit()

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_photo(
            photo="https://i.ibb.co/4wNtnnVM/start.jpg",
            caption=(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ë—Ä–æ–Ω–µ–±–æ–π –ë–æ—Ç.\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/tournaments ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã\n"
                "/winrate ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤\n"
            )
        )
    except:
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ë—Ä–æ–Ω–µ–±–æ–π –ë–æ—Ç.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/tournaments ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã\n"
            "/winrate ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤\n"
        )

async def tournaments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT * FROM tournaments")
    rows = cursor.fetchall()

    if not rows:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
        return

    for row in rows:
        tournament_id, name, fee = row
        btn = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"register_{tournament_id}")]
        ])
        fee_text = f"üí∞ –í–∑–Ω–æ—Å: {fee}‚ÇΩ" if fee else "üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
        await update.message.reply_text(
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {name}\n{fee_text}",
            reply_markup=btn
        )

async def winrate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT username, wins FROM winrates ORDER BY wins DESC")
    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ winrate.")
        return

    text = "üèÜ Winrate –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for username, wins in rows:
        name = f"@{username}" if username else "–ë–µ–∑ username"
        text += f"{name} ‚Äî {wins} –ø–æ–±–µ–¥(—ã)\n"
    await update.message.reply_text(text)

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù –°–ø–∞—Å–∏–±–æ! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É.")

# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    cursor.execute("SELECT id, name FROM tournaments")
    rows = cursor.fetchall()
    if rows:
        buttons = [[InlineKeyboardButton(f"üóë {name}", callback_data=f"del_tourn_{id}")] for id, name in rows]
        await update.message.reply_text("üóë –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä:", reply_markup=InlineKeyboardMarkup(buttons))
    else:
        await update.message.reply_text("–ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ winrate
    cursor.execute("SELECT id, username, wins FROM winrates")
    winrate_rows = cursor.fetchall()
    for row_id, username, wins in winrate_rows:
        user_display = f"@{username}" if username else "–ë–µ–∑ username"
        btn = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_winrate_{row_id}")]
        ])
        await update.message.reply_text(f"{user_display}: {wins} –ø–æ–±–µ–¥(—ã)", reply_markup=btn)

    await update.message.reply_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
        "/add_tournament ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä\n"
        "/list_players ‚Äî —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/edit_winrate ‚Äî –¥–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–±–µ–¥—ã –∏–≥—Ä–æ–∫–∞"
    )

async def add_tournament(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –≤–∑–Ω–æ—Å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä:\n`–õ–µ—Ç–Ω–∏–π –¢—É—Ä–Ω–∏—Ä, 0` ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π\n"
        "`–ö—É–±–æ–∫, 300` ‚Äî –ø–ª–∞—Ç–Ω—ã–π", parse_mode="Markdown"
    )
    context.user_data['add_tournament'] = True

async def list_players(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    cursor.execute("""
        SELECT r.id, r.username, t.name FROM registrations r
        JOIN tournaments t ON r.tournament_id = t.id
    """)
    rows = cursor.fetchall()

    if not rows:
        await update.message.reply_text("–ù–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.")
        return

    for reg_id, username, t_name in rows:
        user_display = f"@{username}" if username else "–ë–µ–∑ username"
        btn = InlineKeyboardMarkup([
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_user_{reg_id}")]
        ])
        await update.message.reply_text(
            f"{user_display} ‚Äî {t_name}",
            reply_markup=btn
        )

async def edit_winrate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª-–≤–æ –ø–æ–±–µ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: `xret, 2`", parse_mode="Markdown"
    )
    context.user_data['edit_winrate'] = True

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('add_tournament'):
        try:
            text = update.message.text
            parts = [x.strip() for x in text.split(",")]
            name = parts[0]
            fee = int(parts[1]) if len(parts) > 1 else 0
            cursor.execute("INSERT INTO tournaments (name, fee) VALUES (?, ?)", (name, fee))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –¢—É—Ä–Ω–∏—Ä ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.")
        except:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: `–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—É–º–º–∞`")
        context.user_data['add_tournament'] = False

    elif context.user_data.get('edit_winrate'):
        try:
            text = update.message.text.strip()
            if 'edit_winrate_id' in context.user_data:
                winrate_id = context.user_data.pop('edit_winrate_id')
                wins = int(text)
                cursor.execute("UPDATE winrates SET wins = ? WHERE id = ?", (wins, winrate_id))
                conn.commit()
                await update.message.reply_text(f"‚úÖ –ü–æ–±–µ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {wins}")
            else:
                username, wins = [x.strip() for x in text.split(",")]
                wins = int(wins)
                cursor.execute("INSERT INTO winrates (username, wins) VALUES (?, ?) ON CONFLICT(username) DO UPDATE SET wins = ?",
                               (username, wins, wins))
                conn.commit()
                await update.message.reply_text(f"‚úÖ Winrate –æ–±–Ω–æ–≤–ª—ë–Ω: @{username} ‚Äî {wins} –ø–æ–±–µ–¥(—ã)")
        except:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: `username, –ø–æ–±–µ–¥—ã`")
        context.user_data['edit_winrate'] = False

async def register_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    data = query.data

    if data.startswith("register_"):
        tournament_id = int(data.split("_")[1])
        cursor.execute("SELECT name, fee FROM tournaments WHERE id = ?", (tournament_id,))
        tournament = cursor.fetchone()
        if not tournament:
            await query.edit_message_text("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        name, fee = tournament

        cursor.execute("""
            SELECT * FROM registrations 
            WHERE user_id = ? AND tournament_id = ?
        """, (user.id, tournament_id))
        if cursor.fetchone():
            await query.edit_message_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        cursor.execute("""
            INSERT INTO registrations (user_id, username, tournament_id)
            VALUES (?, ?, ?)
        """, (user.id, user.username or "", tournament_id))
        conn.commit()

        if fee > 0:
            await query.edit_message_text(
                f"‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç—É—Ä–Ω–∏—Ä: {name}!\n\n"
                f"üí∞ –í–∑–Ω–æ—Å: {fee}‚ÇΩ\n"
                f"üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É:\n`{CARD_NUMBER}`\n\n"
                "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –∏ –∫–æ–º–∞–Ω–¥—É /confirm –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                parse_mode="Markdown"
            )
        else:
            await query.edit_message_text(f"üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç—É—Ä–Ω–∏—Ä: {name}!")

    elif data.startswith("del_tourn_"):
        tournament_id = int(data.split("_")[2])
        cursor.execute("DELETE FROM tournaments WHERE id = ?", (tournament_id,))
        cursor.execute("DELETE FROM registrations WHERE tournament_id = ?", (tournament_id,))
        conn.commit()
        await query.edit_message_text("‚ùå –¢—É—Ä–Ω–∏—Ä —É–¥–∞–ª—ë–Ω.")

    elif data.startswith("del_user_"):
        reg_id = int(data.split("_")[2])
        cursor.execute("DELETE FROM registrations WHERE id = ?", (reg_id,))
        conn.commit()
        await query.edit_message_text("üóëÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª—ë–Ω.")

    elif data.startswith("edit_winrate_"):
        winrate_id = int(data.split("_")[2])
        cursor.execute("SELECT username FROM winrates WHERE id = ?", (winrate_id,))
        row = cursor.fetchone()
        if not row:
            await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        username = row[0]
        context.user_data['edit_winrate_id'] = winrate_id
        context.user_data['edit_winrate'] = True
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–±–µ–¥ –¥–ª—è @{username} (–Ω–∞–ø—Ä–∏–º–µ—Ä: `3`)", parse_mode="Markdown")

# === –ó–∞–ø—É—Å–∫ ===
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("Start", start))
    app.add_handler(CommandHandler("Tournaments", tournaments))
    app.add_handler(CommandHandler("Winrate", winrate))
    app.add_handler(CommandHandler("Admin", admin))
    
    app.add_handler(CallbackQueryHandler(register_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
